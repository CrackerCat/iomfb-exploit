#!/usr/local/bin/python3

# First elem is the size of them in MBs
# Second elem is a CONTIGUOUS range of allocations from different boots

alloc_list = [
        (3, [
                [0xffffffe8c22e0000, 0xffffffe8c2d5c000],
                [0xffffffe8c20d4000, 0xffffffe8c2b50000],
                [0xffffffe8c5478000, 0xffffffe8c5ef4000],
            ]
        ),
        # (4, [
        #         [0xffffffe8c272c000, 0xffffffe8c3528000],
        #         [0xffffffe8c272c000, 0xffffffe8c3528000],
        #     ]
        # ),
        (12,
            [
                # XXX start samples immediately after boot
                # [0xffffffe8c2564000, 0xffffffe8c4f60000],
                # [0xffffffe8c2358000, 0xffffffe8c4d54000],
                # [0xffffffe8c2654000, 0xffffffe8c5050000],
                # [0xffffffe8c25a0000, 0xffffffe8c4f9c000],
                # [0xffffffe8c2508000, 0xffffffe8c4f04000],
                # [0xffffffe8c2184000, 0xffffffe8c4b80000],
                # [0xffffffe8c241c000, 0xffffffe8c4e18000],
                # [0xffffffe8c275c000, 0xffffffe8c5158000],
                # [0xffffffe8c217c000, 0xffffffe8c4b78000],
                # [0xffffffe8c59e0000, 0xffffffe8c83dc000],
                # [0xffffffe8c5cac000, 0xffffffe8c86a8000],
                # [0xffffffe8c5d40000, 0xffffffe8c873c000],
                # [0xffffffe8c59ec000, 0xffffffe8c83e8000],
                # [0xffffffe8c59c8000, 0xffffffe8c83c4000],
                # [0xffffffe8c596c000, 0xffffffe8c8368000],
                # [0xffffffe8c5898000, 0xffffffe8c8294000],
                # XXX end samples immediately after boot


                # XXX start samples after leaving the phone alone for 30secs
                # XXX for iPhone 8, 14.6
                # [0xffffffe8c2394000, 0xffffffe8c4d90000],
                # [0xffffffe8c20e0000, 0xffffffe8c4adc000],
                # [0xffffffe8c2128000, 0xffffffe8c4b24000],
                # [0xffffffe8c2214000, 0xffffffe8c4c10000],
                # [0xffffffe8c2070000, 0xffffffe8c4a6c000],
                # [0xffffffe8c2008000, 0xffffffe8c4a04000],
                # [0xffffffe8c2164000, 0xffffffe8c4b60000],
                # [0xffffffe8c2674000, 0xffffffe8c5070000],
                # [0xffffffe8c2670000, 0xffffffe8c506c000],
                # [0xffffffe8c23c0000, 0xffffffe8c4dbc000],
                # [0xffffffe8c2604000, 0xffffffe8c5000000],
                # [0xffffffe8c26c8000, 0xffffffe8c50c4000],
                # [0xffffffe8c24a0000, 0xffffffe8c4e9c000],
                # [0xffffffe8c1fcc000, 0xffffffe8c49c8000],
                # [0xffffffe8c226c000, 0xffffffe8c4c68000],
                # [0xffffffe8c2c1c000, 0xffffffe8c5618000],
                # XXX end samples after leaving the phone alone for 30secs

                # XXX start samples after leaving the phone alone for 30secs
                # XXX for iPhone SE (2016), 14.7    
                [0xfffffff008960000, 0xfffffff00b35c000],
                [0xfffffff008230000, 0xfffffff00ac2c000],
                [0xfffffff008898000, 0xfffffff00b294000],
                [0xfffffff0085f0000, 0xfffffff00afec000],
                # XXX end samples after leaving the phone alone for 30secs
            ]
        ),
        (14,
            [
                [0xffffffe8c2410000, 0xffffffe8c550c000],
                [0xffffffe8c26e8000, 0xffffffe8c57e4000],
                [0xffffffe8c5c40000, 0xffffffe8c8d3c000],
                [0xffffffe8c58ec000, 0xffffffe8c89e8000],
                [0xffffffe8c57b8000, 0xffffffe8c88b4000],

            ],
        ),
]

def average_allocs():
    global alloc_list

    ptr_mask = 0xffffffffffffc000

    for alloc in alloc_list:
        # XXX XXX for testing
        # alloc = alloc_list[1]

        nallocs = 0
        total = 0

        # in mb
        alloc_sz = alloc[0]
        allocs = alloc[1]

        npages = 0

        for contig_alloc_range in allocs:
            curpage = contig_alloc_range[0]
            last = contig_alloc_range[1]

            while curpage < last:
                total += curpage
                npages += 1
                curpage += 0x4000

        avg = (total // npages) & ptr_mask

        satisfied = 0
        not_satisfied = 0

        for contig_alloc_range in allocs:
            first = contig_alloc_range[0]
            last = contig_alloc_range[1]

            if avg >= first and avg < last:
                satisfied += 1
            else:
                not_satisfied += 1

        right_chance = (satisfied / len(allocs)) * 100.0

        print("For %d MB allocs: guess: 0x%x (%.02f%% chance (%d/%d) of being right)" % (alloc_sz, avg, right_chance, satisfied, len(allocs)))

    return

def main():
    average_allocs()
    return

main()
